#
# Sauron sample configuration
#
# $Id: config.in,v 1.39 2007/10/15 07:40:30 tjko Exp $
#

#########################################################################
# general configuration options (you need to configure at least these)

# Base directory for Sauron install
$PROG_DIR = "/usr/local/sauron/";

# directory for logfiles
$LOG_DIR = "<%= @log_dir %>";

# unique server ID (if using multiple www-servers)
$SERVER_ID = "<%= @server_id %>";


########################################################################
# database connection setup

# for DBI backend (see DBD::Pg module docs for more info on parameters)
#$DB_DSN = "dbi:Pg:dbname=sauron;host=localhost;port=5432";
$DB_DSN = "<%= @db_dsn %>";

# for old Pg backend (see Pg modules docs for more info on parameters)
#$DB_DSN = "dbname=sauron host=localhost port=5432";
#$DB_DSN = "dbname=sauron";

# database user
$DB_USER = "<%= @db_user %>";
# database (user) password
$DB_PASSWORD = "<%= @db_password %>";


#########################################################################
# advanced configuration options

# mailer configuration (set to enable email notifications)
# $SAURON_MAILER = '/usr/sbin/sendmail';
# $SAURON_MAILER_ARGS = '-t'; 
# $SAURON_MAIL_FROM = 'postmaster@somedomain'; 

# set to enable ping command in web interface
<% if @sauron_ping['enable'] -%>
# $SAURON_PING_PROG = '<%= @sauron_ping['prog'] %>';
# $SAURON_PING_ARGS = '<%= @sauron_ping['args'] %>';  
# $SAURON_PING_TIMEOUT = '<%= @sauron_ping['timeout'] %>';  
# $ALEVEL_PING = <%= @sauron_ping['alevel'] %>;  # authorization level needed to use ping
<% end -%>

# set to enable ping sweeps from web interface using nmap
# $SAURON_NMAP_PROG = '/usr/bin/nmap';
# $SAURON_NMAP_TMPDIR = "$PROG_DIR/tmp/";
# $SAURON_NMAP_ARGS = '-n -sP';  
# $SAURON_NMAP_TIMEOUT = '30';  
# $ALEVEL_NMAP = 5;  # authorization level needed to use nmap

# set to enable traceroute command in web interface
# $SAURON_TRACEROUTE_PROG = '/usr/sbin/traceroute';
# $SAURON_TRACEROUTE_ARGS = '';  
# $SAURON_TRACEROUTE_TIMEOUT = 15;
# $ALEVEL_TRACEROUTE = 1; # authorization level needed to use traceroute

# set to enable dhcpd.conf validation from sauron
# $SAURON_DHCP_CHK_PROG = '/usr/sbin/dhcpd';
# $SAURON_DHCP_CHK_ARGS = '-q -t -cf';

# set to enable named.conf validation from sauron
<% if @sauron_named_chk['enable'] -%>
$SAURON_NAMED_CHK_PROG = '<%= @sauron_named_chk['prog'] %>';
$SAURON_NAMED_CHK_ARGS = '<%= @sauron_named_chk['args'] %>';
<% end -%>

# set to enable zone file validation from sauron
<% if @sauron_zone_chk['enable'] -%>
# $SAURON_ZONE_CHK_PROG = '<%= @sauron_zone_chk['prog'] %>';
# $SAURON_ZONE_CHK_ARGS = '<%= @sauron_zone_chk['args'] %>';
<% end -%>

# set to enable TSIG/DNSSEC key generation
# $SAURON_DNSSEC_KEYGEN_PROG = '/usr/sbin/dnssec-keygen';
# $SAURON_DNSSEC_KEYGEN_ARGS = '-r /dev/random';

# sauron --clean will remove all hosts that have been expired longer 
# than days defined here
# $SAURON_REMOVE_EXPIRED_DELAY = 30;

# default method for encrypting passwords:
#        0 = simple MD5 based hash with salt
#        1 = standard Unix crypt
#
# $SAURON_PWD_MODE = 1;

# control how strict domain name validation rules to use:
#	0 = allow only fully compliant names
#       1 = ame as mode 1 except allow use of '_' character in names
#
# $SAURON_DNSNAME_CHECK_MODE = 0;

# User authentication mode:
#    0 = (default) Uses internal authentication, authenticates agains
#        encrypted passwords stored in the database (or using external
#        authentication program if SAURON_AUTH_PROG is defined).
#    1 = Use Apache (external) authentication, trusts REMOTE_USER
#        environment variables set by httpd.
#
# $SAURON_AUTH_MODE = 0;

# External authentication command/script.
# This script should read one line from STDIN that contains username
# and password separated by whitespace and return: 
#   0 = successful authnentication
#   <nonzero> = failed (wrong password)
#
<% if @sauron_auth_prog -%>
$SAURON_AUTH_PROG = "<%= @sauron_auth_prog %>";
<% end -%>

#########################################################################
# WWW interface (sauron.cgi) configuration options 


# icon path for sauron icons (under www-server)
<% if @sauron_icon_path -%>
$SAURON_ICON_PATH = "<%= @sauron_icon_path %>";
<% end -%>

# idle timeout for user sessions (in seconds)
<% if @sauron_user_timeout -%>
$SAURON_USER_TIMEOUT = <%= @sauron_user_timeout %>;
<% end -%>

# authorization level needed to see vlan info in web interface
# $ALEVEL_VLANS = 5;

# authorization level needed to see ACLs & Keys info in web interface
# $ALEVEL_ACLS = 5;

# authorization level needed to see host history
# $ALEVEL_HISTORY = 1;

# specify charset for CGI interface (default is iso-8859-1)
# $SAURON_CHARSET = 'iso-8859-15';

# Set this to 1 to enable secure cookies. Note, this may cause problems
# with some broken browsers, so it's not enabled by default.
# $SAURON_SECURE_COOKIES = 0;

# To disable user remote address checking set this to 1. 
# (by default Sauron is so paranoid that cookies will be accepted
# only from the address they were initially issued to)
# $SAURON_NO_REMOTE_ADDR_AUTH = 1;

# restricted host form field defaults: 0=required, 1=optional
$SAURON_RHF{huser}    = <%= @sauron_rhf['huser'] %>; # User
$SAURON_RHF{dept}     = <%= @sauron_rhf['dept'] %>; # Dept.
$SAURON_RHF{location} = <%= @sauron_rhf['location'] %>; # Location
$SAURON_RHF{info}     = <%= @sauron_rhf['info'] %>; # [Extra] Info
$SAURON_RHF{ether}    = <%= @sauron_rhf['ether'] %>; # Ether
$SAURON_RHF{asset_id} = <%= @sauron_rhf['asset_id'] %>; # Asset ID
$SAURON_RHF{model}    = <%= @sauron_rhf['model'] %>; # Model
$SAURON_RHF{serial}   = <%= @sauron_rhf['serial'] %>; # Serial
$SAURON_RHF{misc}     = <%= @sauron_rhf['misc'] %>; # Misc.
$SAURON_RHF{email}    = <%= @sauron_rhf['email'] %>; # User Email

# Optional custom restictions for host record fields. 
# Restrictions can be defined by server and for each
# field list of restrictiongs (regexps) can be specified.
# First restriction that matches user's group is enforced.
# Currently supported host record fields are:
#   location, dept, asset_id
#
# $SAURON_CHR = {
#     'servername' => {
#          'location' => [ ['.*','^(SiteA|SiteB)\d+$',
#                           'Official Site code + room number required'] 
#                        ],
#	   'dept' => [ 
#         	       ['^groupa','^(Sales|Development|Research)$'],
#		       ['^groubb','^(Manufacturing|Shipping)$' ]
#          ],
#	   'asset_id' => [ ['.*', '^[A-Z]{2}\d{4,5}$'] ]
#     }
# };	

# Set this to enable more restrictive user privilege intepretation.
#  1 = zone read (write) access is not inherited from server privileges
#      (user sees only zones she has explicitly given read (write) access)
<% if @sauron_priviledge_mode -%>
$SAURON_PRIVILEGE_MODE = <%= @sauron_priviledge_mode %>
<% end -%>

# set 1 to use hardcoded DTD instead the one genereated by CGI module
# $SAURON_DTD_HACK = 0;

# Set this to change behaviour of HINFO edit fields (for hosts):
#    1 = Allow empty values (last in the drop-down list)
#   -1 = Allow emptry values (first in the drop-down list)
#    0 = Don't allow empty values
#
# $SAURON_HINFO_MODE = 1;

# CGI interface plugins
#
# plugins consist of a defition file (.conf) and actual Perl module (.pm)
# and are expected to be under plugins/ directory.
#
# This arguemnt contains comma separated list of plugins to load:
#
# $SAURON_PLUGINS = "test";

#########################################################################
# misc

# uncomment to enable compatibilty with DHCP v2.0 ...
# $SAURON_DCHP2_MODE = 1;

<% if @sauron_bgcolor -%>
$SAURON_BGCOLOR="<%= @sauron_bgcolor %>";
<% end -%>
<% if @sauron_fgcolor -%>
$SAURON_FGCOLOR="<%= @sauron_fgcolor %>";
<% end -%>

# $LOOPBACK_NET = "127.0.0.0/24";
# $LOOPBACK_ZONE = "loopback.";

1;
# eof
